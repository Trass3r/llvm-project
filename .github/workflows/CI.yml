name: CI

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        #compiler: [g++, clang++]
        #buildconfig: [Debug, Release]
        config:
        - {cc: gcc, cxx: g++, config: Debug, cmake_args: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-march=skylake -Og -gsplit-dwarf"}
        - {cc: gcc, cxx: g++, config: Release, cmake_args: -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_LTO=On DCMAKE_CXX_FLAGS="-march=skylake -gsplit-dwarf -Wsuggest-final-types"}
        - {cc: clang, cxx: clang++, config: Debug, cmake_args: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-march=skylake -Og -gsplit-dwarf" -DLLVM_ENABLE_MODULES=ON -DLLVM_ENABLE_MODULE_DEBUGGING=ON }
        - {cc: clang, cxx: clang++, config: Release, cmake_args: -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_LTO=Thin -DCMAKE_CXX_FLAGS="-march=skylake -gsplit-dwarf -ftime-trace" -DLLVM_ENABLE_MODULES=ON -DLLVM_ENABLE_MODULE_DEBUGGING=ON }

    steps:
    - run: echo "::set-env name=CCACHE_DIR::$GITHUB_WORKSPACE/build/.ccache"
    - uses: actions/checkout@v2
    - uses: Trass3r/setup-cpp@master
    - run: sudo apt install -y build-essential binutils-dev cmake ninja-build clang lld python3 ccache libedit-dev
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: echo "::set-output name=date::`date -u +"%Y-%m-%d-%H;%M;%S"`"

    - name: ccache cache files
      uses: actions/cache@v2
      with:
        path: build/.ccache
        key: ${{ matrix.config.cc }}-${{ matrix.config.config }}-ccache
    - name: build
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        mkdir -p build && cd build
        cmake -G Ninja -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_DOCS=OFF -DLLVM_INCLUDE_TESTS=OFF -DCLANG_INCLUDE_TESTS=OFF -DCLANG_INCLUDE_DOCS=OFF -DCLANG_ENABLE_ARCMT=OFF -DLLVM_TARGETS_TO_BUILD=all -DLLVM_ENABLE_PROJECTS=all -DCMAKE_INSTALL_PREFIX=/opt/clang -DLLVM_BINUTILS_INCDIR=/usr/include -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_ENABLE_LLD=ON -DBUILD_SHARED_LIBS=ON ${{ matrix.config.cmake_args }} ../llvm/
        ninja -k100 ; ccache -s
        git clone --depth=1 https://github.com/nico/ninjatracing.git
        python3 ninjatracing/ninjatracing build/.ninja_log > buildtrace.json
        python3 ninjatracing/ninjatracing build/.ninja_log -e > buildtrace.e.json
        sudo ninja install
        sudo bash -c 'find /opt/clang -type f -executable | xargs -t -n1 -P8 dwp -v -e'
    - uses: actions/upload-artifact@v2
      with:
        name: clang
        path: /opt/clang
    - uses: actions/upload-artifact@v2
      with:
        path: buildtrace.json
    - uses: actions/upload-artifact@v2
      with:
        path: buildtrace.e.json
