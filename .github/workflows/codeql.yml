name: "CodeQL"

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**/CI.yml'
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
        queries: +security-extended
    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: codeql
        max-size: 0.75G
        verbose: 1
    - env:
        CC: clang
        CXX: clang++
        CCACHE_NOCOMPRESS: 1 # cache action will also compress
        CCACHE_SLOPPINESS: pch_defines,time_macros
      run: |
        sudo apt update && sudo apt install -y build-essential g++ binutils-dev cmake ninja-build clang lld python3 ccache
        cmake llvm -GNinja -DLLVM_CCACHE_BUILD=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG='-Og -g0' -DLLVM_ENABLE_PROJECTS="clang" -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        # CodeChecker chokes on asm entries
        #sed -i 's/\.S/.c/g' compile_commands.json
        # build all .inc without order-only deps
        sed -ri 's/(build .+?\.inc: .+?) \|\| .+/\1/g' build.ninja
        ninja -k0 $(ninja -t targets | grep '.inc:' | grep -v Introspection.inc | sed 's/:.*//')
        find -type f -name '*.o' -exec du -ch {} + | grep total$
        ccache -x
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:cpp"
    - run: |
        echo '{"analyze": ["--verbose=debug"]}' > codechecker.json
    - uses: whisperity/codechecker-analysis-action@v1
      env:
        CODECHECKER_ACTION_DEBUG: 1
      id: codechecker
      with:
        config: 'codechecker.json'
        logfile: ${{ github.workspace }}/compile_commands.json
    - uses: actions/upload-artifact@v3
      with:
        name: "CodeChecker Bug Reports"
        path: ${{ steps.codechecker.outputs.result-html-dir }}

  CSA:
    name: CSA
    runs-on: ubuntu-22.04
    #container: ubuntu:devel
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    #- run: apt update && apt install -y sudo git
    - uses: actions/checkout@v3
    - run: |
        sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" llvm.sh 16
        sudo apt update && sudo apt -qq install -y build-essential g++ binutils-dev cmake ninja-build clang clang-tools-16 lld python3 ccache
        #export CCC_CC=clang CCC_CXX=clang++ CCC_ANALYZER_OUTPUT_FORMAT=sarif-html # there's also CLANG/CLANG_CXX for the analyzer
        cmake llvm -GNinja -DLLVM_CCACHE_BUILD=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG='-g0' -DCMAKE_INSTALL_PREFIX=install -DLLVM_ENABLE_PROJECTS="" -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        #timeout 5.8h scan-build-16 -v ninja -k0 clang

        sed -ri 's/(build .+?\.inc.+?) \|\| .+/\1/g' build.ninja
        ninja -k0 $(ninja -t targets | egrep '_gen:|TableGen:' | sed 's/:.*//')
        analyze-build-16 -v --sarif-html -o csa

        find -type f -name '*.o' -exec du -ch {} + | grep total$
      continue-on-error: true
    - uses: actions/upload-artifact@v3
      with:
        name: CSA
        path: csa
    - run: |
        sudo apt -qq install npm
        export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
        npx -y @microsoft/sarif-multitool merge csa/*/*.sarif
        ls -lA
    - uses: github/codeql-action/upload-sarif@main
      with:
        sarif_file: merged.sarif
        category: csa
